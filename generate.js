const fs = require("fs");

// TODO make this a command line param
const baseDir = "./";

function fmt(n) {
  let result = n.toString();
  // Stay clear of the left-pad chaos!
  while(result.length < 6) {
    result = "0" + result;
  }
  return result;
}

function generate(N) {
  for(let i=1; i<=N; i++) {
    const me = fmt(i);
    const left = fmt(2 * i);
    const right = fmt(2 * i + 1);

    let componentTs = `// Code generated by angular2-stress-test
import {Component} from '@angular/core';\n`;

    if(left <= N) {
      componentTs += `import {GeneratedComponent${left}} from "./component${left}";\n`;
    }
    if(right <= N) {
      componentTs += `import {GeneratedComponent${right}} from "./component${right}";\n`;
    }

    componentTs += `
@Component({
    selector: 'my-comp-${me}',
    template: '<div>component ${me}<div style="padding-left: 5px">`;

    if(left <= N) {
      componentTs += `<my-comp-${left}></my-comp-${left}>`;
    }
    if(right <= N) {
      componentTs += `<my-comp-${right}></my-comp-${right}>`;
    }

    componentTs += `</div></div>',
    directives: [`;

    if(left <= N) {
      componentTs += `GeneratedComponent${left}`;
    }
    if(right <= N) {
      componentTs += `, GeneratedComponent${right}`;
    }

    componentTs += `]
})
export class GeneratedComponent${me} { }
`;

    const componentFileName = `${baseDir}component${me}.ts`;

    fs.writeFileSync(componentFileName, componentTs);
  }

  // Generate top-level component to point at them.
  // Write this last, in case something is watching the file system,
  // we want to trigger a new compile from the "top".

  const appComponentTs = `// Code generated by angular2-stress-test
import {Component} from '@angular/core';
import {GeneratedComponent${fmt(1)}} from "./component${fmt(1)}";

@Component({
    selector: 'my-app',
    template: '<h1>Angular 2 App with many components</h1><my-comp-${fmt(1)}></my-comp-${fmt(1)}>',
    directives: [GeneratedComponent${fmt(1)}]
})
export class AppComponent { }
`;

  fs.writeFileSync(baseDir + "app.component.ts", appComponentTs);
}

module.exports = generate;
