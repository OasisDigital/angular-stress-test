const fs = require("fs");
const mkdirp = require('mkdirp');

const baseDir = "./";

const randValue = Math.round(Math.random() * 10000);

const exportedComponentForModule = {};

function fmt(n) {
  let result = n.toString();
  // Stay clear of the left-pad chaos!
  while (result.length < 6) {
    result = "0" + result;
  }
  return result;
}

function componentName(i) {
  return `Generated${fmt(i)}Component`;
}

function componentfileName(i) {
  return `generated.${fmt(i)}.component`;
}

function componentSelector(i) {
  return `app-comp-${fmt(i)}`;
}

function generateModules(nModules, nComponents, deterministic) {
  const componentsInModule = new Array(nModules);
  componentsInModule.fill(0);
  for (let c = 0; c < nComponents; c++) {
    componentsInModule[c % nModules]++;
  }

  let nextComponentNumber = 0;
  for (let m = 0; m < nModules; m++) {
    const moduleName = 'Module' + fmt(m);
    generateModule(moduleName, nextComponentNumber, componentsInModule[m]);
    generateComponents(moduleName, nextComponentNumber, componentsInModule[m], deterministic);
    nextComponentNumber += componentsInModule[m];
  }
}

function generateModule(moduleName, base, nComponents) {
  let ts = `// Code generated by angular-stress-test

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

`;
  for (let i = 1; i <= nComponents; i++) {
    ts += `import { ${componentName(base + i)} } from './${componentfileName(base + i)}';\n`;
  }
  ts += `

@NgModule({
  declarations: [`;

  for (let i = 1; i <= nComponents; i++) {
    ts += `\n    ${componentName(base + i)},`;
  }
  ts += `
  ],
  imports: [CommonModule],
  exports: [`;
  ts += `\n    ${componentName(base + 1)},`;
  exportedComponentForModule[moduleName] = base + 1;
  ts += `
  ]
})
export class ${moduleName} { }
`;

  mkdirp.sync(`${baseDir}${moduleName}`);
  const moduleFileName = `${baseDir}${moduleName}/${moduleName}.module`;
  fs.writeFileSync(moduleFileName + '.ts', ts);
}

function generateComponents(moduleName, base, n, deterministic) {
  for (let i = 1; i <= n; i++) {
    const left = 2 * i;
    const right = 2 * i + 1;

    let ts = `// Code generated by angular-stress-test

import { Component, Input } from '@angular/core';\n`;

    ts += `
@Component({
  selector: '${componentSelector(base + i)}',
  template: \`<div>
    <span>component {{myName}}, parent is {{parentName}}</span>`;

    if (!deterministic) {
      ts += `
    <small>[${ randValue}]</small>`;
    }

    ts += `
    <div style="padding-left: 5px">`;

    if (left <= n) {
      ts += `
      <app-comp-${fmt(base + left)} [parentName]="myName"></app-comp-${fmt(base + left)}>`;
    }
    if (right <= n) {
      ts += `
      <app-comp-${fmt(base + right)} [parentName]="myName"></app-comp-${fmt(base + right)}>`;
    }

    ts += `
    </div></div>
  \`
})
export class ${componentName(base + i)} {
  @Input() parentName: string;
  myName = '${fmt(base + i)}';
`;

    if (!deterministic) {
      ts += `
  // Random variable to make this component different on each generation
  variable${ randValue}: number = ${randValue};
`;
    }
    ts += `}
`;

    mkdirp.sync(`${baseDir}${moduleName}`);
    fs.writeFileSync(`${baseDir}${moduleName}/${componentfileName(base + i)}.ts`, ts);
  }
}

function generateAppComponent(nModules, nComponents) {
  const ts = `// Code generated by angular-stress-test

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html'
})
export class AppComponent { }
`;

  fs.writeFileSync(baseDir + "app.component.ts", ts);

  let html = `
    <h1>Angular App with ${nModules} modules and ${nComponents} components</h1>
`;
  for (let m = 0; m < nModules; m++) {
    const moduleName = 'Module' + fmt(m);
    const sel = componentSelector(exportedComponentForModule[moduleName]);
    html += `<${sel}></${sel}>\n`;
  }
  fs.writeFileSync(baseDir + "app.component.html", html);

}

function generateAppModule(nModules) {
  let ts = `// Code generated by angular-stress-test

import { NgModule } from '@angular/core';
import { BrowserModule  } from '@angular/platform-browser';
import { AppComponent } from './app.component';
`;

  for (let m = 0; m < nModules; m++) {
    const moduleName = 'Module' + fmt(m);
    const moduleFileName = `${baseDir}${moduleName}/${moduleName}.module`;
    ts += `import { ${moduleName} } from '${moduleFileName}';\n`;
  }

  ts += `

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
`;
  for (let m = 0; m < nModules; m++) {
    const moduleName = 'Module' + fmt(m);
    ts += `    ${moduleName},\n`;
  }
  ts += `
  ],
  bootstrap: [
    AppComponent
  ]
})
export class AppModule { }
`;

  fs.writeFileSync(baseDir + "app.module.ts", ts);
}

function generate(nModules, nComponents, deterministic) {
  generateModules(nModules - 1, nComponents - 1, deterministic);
  generateAppComponent(nModules - 1, nComponents);  // + 1 component
  generateAppModule(nModules - 1);  // + 1 module
}

module.exports = generate;
